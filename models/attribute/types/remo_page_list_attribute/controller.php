<?php

defined('C5_EXECUTE') or die('Access Denied.');

class RemoPageListAttributeAttributeTypeController extends AttributeTypeController {

	const TABLE_SETTINGS = 'atRemoPagelistAttributeSettings';
	const TABLE_VALUES = 'akRemoPagelistAttributeSelectedPages';

	protected $searchIndexFieldDefinition = 'X NULL';

	public function getSearchIndexValue() {
		$v = $this->getValue();
                return join(',', $v);
	}

	public function getDisplayValue() {
		$v = $this->getValue();
                if (is_array($v)) {
                    echo '<ul>';
                    foreach ($v as $cID) {
                        $page = Page::getByID($cID);
                        echo '<li><a href="' . Loader::helper('navigation')->getLinkToCollection($page) . '">' . $page->getCollectionName() . '</a></li>';
                    }
                    echo '<ul>';
                }
	}

	public function getValue() {
		$db = Loader::db();
		$selectedPages = $db->GetCol('SELECT cID FROM ' . self::TABLE_VALUES . ' WHERE avID=?', array($this->getAttributeValueID()));
		return $selectedPages;
	}

	/**
	 * Load attribute type configuration
	 * @return boolean
	 */
	protected function load() {
		$ak = $this->getAttributeKey();
		if (!is_object($ak)) {
			return false;
		}

		$db = Loader::db();
		$row = $db->GetRow('SELECT * FROM ' . self::TABLE_SETTINGS . ' WHERE akID = ?', $ak->getAttributeKeyID());

		unset($row['akID']);

		foreach ($row as $variableName => $variableValue) {
			$this->set('ak' . ucfirst($variableName), $variableValue);
		}

		return true;
	}

	/**
	 * Display type form shown when editing the attribute
	 */
	public function type_form() {
                // detect if the multiligual package is installed
                $remoPageListAttribute = Package::getByHandle('multilingual');
                $multilingualSections = [];
                if (is_object($remoPageListAttribute)) {
                    $mSectionsTemp = array_flip(MultilingualSection::getIDLIst());
                    $multilingualSections[0] = t('No language selected');
                    foreach ($mSectionsTemp as $msID => $dummy) {
                        $multilingualSections[$msID] = MultilingualSection::getByID($msID)->getLanguageText();
                    }
                }
                
		$collectionTypes = CollectionType::getList();

		$this->load();

		$this->set('collectionTypes', $collectionTypes);
		$this->set('form', Loader::helper('form'));
                $this->set('multilingualSections', $multilingualSections);
	}

	public function deleteKey() {
		$db = Loader::db();
	}

	/**
	 * Save type form data
	 * @param Array $data
	 */
	public function saveKey($data) {
		$ak = $this->getAttributeKey();

		$db = Loader::db();

		$selectedPageTypes = '';
		if (array_key_exists('selectedPageTypes', $data)) {
			$selectedPageTypes = join(',', $data['selectedPageTypes']);
		}

		// now we have a collection attribute key object above.
		$db->Replace(self::TABLE_SETTINGS, array(
		    'akID' => $ak->getAttributeKeyID(),
                    'displayDropDown' => $data['displayDropDown'],
                    'displayMultilingualSection' => $data['displayMultilingualSection'],
		    'selectedPageTypes' => $selectedPageTypes), array('akID'), true);
	}

	/**
	 * Display form where attribute values can be selected
	 */
	public function form() {
		$this->load();

		// get selected pages
		$db = Loader::db();
		$selectedPages = $this->getValue();
		$this->set('selectedPages', $selectedPages);
	}

	/**
	 * Save form data shown by the form() method
	 * @param Array $data
	 */
	public function saveForm($data) {
		$db = Loader::db();

		$db->Execute('DELETE FROM ' . self::TABLE_VALUES . ' WHERE avID=?', array($this->getAttributeValueID()));

		if (is_array($data['pageID']) && array_key_exists('pageID', $data)) {
			foreach ($data['pageID'] as $cID) {
				$db->Execute('INSERT INTO ' . self::TABLE_VALUES . ' (avID, cID) VALUES (?,?)', array($this->getAttributeValueID(), $cID));
			}
		}
	}

	/**
	 * Display from where the user can select the values to find existing
	 * attribute category entries.
	 */
	public function search() {
		$this->load();                
                
                $selectedPages = $this->request('atPageID');
		if (!is_array($selectedPages)) {
			$selectedPages = array();
		}
		$this->set('selectedPages', $selectedPages);
	}

	/**
	 * Searches for the values selected in the form generated by search()
	 * @param DatabaseItemList $list
	 * @return DatabaseItemList
	 */
	public function searchForm($list) {
		$selectedPageIDs = array_filter($this->request('atPageID'));
		$db = Loader::db();

		if (is_array($selectedPageIDs) && !empty($selectedPageIDs)) {                    
			$list->filter(false, '(EXISTS (
                                SELECT 1 FROM akRemoPagelistAttributeSelectedPages rpasp 
                                INNER JOIN CollectionAttributeValues cav ON cav.avID=rpasp.avID
                                WHERE rpasp.cID IN ('  . join(',', $selectedPageIDs) . ') 
                                AND cav.cID=cv.cID
                                AND cav.cvID=cv.cvID 
                        ))');
		}
		return $list;
	}

}
